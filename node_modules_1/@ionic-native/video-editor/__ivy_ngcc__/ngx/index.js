import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
var VideoEditor = /** @class */ (function (_super) {
    __extends(VideoEditor, _super);
    function VideoEditor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.OptimizeForNetworkUse = {
            NO: 0,
            YES: 1,
        };
        _this.OutputFileType = {
            M4V: 0,
            MPEG4: 1,
            M4A: 2,
            QUICK_TIME: 3,
        };
        return _this;
    }
    VideoEditor.prototype.transcodeVideo = function (options) { return cordova(this, "transcodeVideo", { "callbackOrder": "reverse" }, arguments); };
    VideoEditor.prototype.trim = function (options) { return cordova(this, "trim", { "callbackOrder": "reverse", "platforms": ["iOS"] }, arguments); };
    VideoEditor.prototype.createThumbnail = function (options) { return cordova(this, "createThumbnail", { "callbackOrder": "reverse" }, arguments); };
    VideoEditor.prototype.getVideoInfo = function (options) { return cordova(this, "getVideoInfo", { "callbackOrder": "reverse" }, arguments); };
    VideoEditor.pluginName = "VideoEditor";
    VideoEditor.plugin = "cordova-plugin-video-editor";
    VideoEditor.pluginRef = "VideoEditor";
    VideoEditor.repo = "https://github.com/jbavari/cordova-plugin-video-editor";
    VideoEditor.platforms = ["Android", "iOS", "Windows", "Windows Phone 8"];
VideoEditor.ɵfac = function VideoEditor_Factory(t) { return ɵVideoEditor_BaseFactory(t || VideoEditor); };
VideoEditor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: VideoEditor, factory: function (t) { return VideoEditor.ɵfac(t); } });
var ɵVideoEditor_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(VideoEditor);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(VideoEditor, [{
        type: Injectable
    }], null, null); })();
    return VideoEditor;
}(IonicNativePlugin));
export { VideoEditor };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,