import { IonicNativePlugin } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
export interface TranscodeOptions {
    /** The path to the video on the device. */
    fileUri: string;
    /** The file name for the transcoded video */
    outputFileName: string;
    /** Instructions on how to encode the video. Android is always mp4 */
    outputFileType?: number;
    /** Should the video be processed with quailty or speed in mind. iOS only */
    optimizeForNetworkUse?: number;
    /** Save the new video the library. Not supported in windows. Defaults to true */
    saveToLibrary?: boolean;
    /** Delete the original video. Android only. Defaults to false */
    deleteInputFile?: boolean;
    /** iOS only. Defaults to true */
    maintainAspectRatio?: boolean;
    /** Width of the result */
    width?: number;
    /** Height of the result */
    height?: number;
    /** Bitrate in bits. Defaults to 1 megabit (1000000). */
    videoBitrate?: number;
    /** Frames per second of the result. Android only. Defaults to 24. */
    fps?: number;
    /** Number of audio channels. iOS only. Defaults to 2. */
    audioChannels?: number;
    audioSampleRate?: number;
    /** Sample rate for the audio. iOS only. Defaults to 128 kilobits (128000). */
    audioBitrate?: number;
    /** Not supported in windows, progress on the transcode. info will be a number from 0 to 100 */
    progress?: (info: number) => void;
}
export interface TrimOptions {
    /** Path to input video. */
    fileUri: string;
    /** Time to start trimming in seconds */
    trimStart: number;
    /** Time to end trimming in seconds */
    trimEnd: number;
    /** Output file name */
    outputFileName: string;
    /** Progress on transcode. info will be a number from 0 to 100 */
    progress?: (info: any) => void;
}
export interface CreateThumbnailOptions {
    /** The path to the video on the device */
    fileUri: string;
    /** The file name for the JPEG image */
    outputFileName: string;
    /** Location in the video to create the thumbnail (in seconds) */
    atTime?: number;
    /** Width of the thumbnail. */
    width?: number;
    /** Height of the thumbnail. */
    height?: number;
    /** Quality of the thumbnail (between 1 and 100). */
    quality?: number;
}
export interface GetVideoInfoOptions {
    /** The path to the video on the device. */
    fileUri: string;
}
export interface VideoInfo {
    /** Width of the video in pixels. */
    width: number;
    /** Height of the video in pixels. */
    height: number;
    /** Orientation of the video. Will be either portrait or landscape. */
    orientation: 'portrait' | 'landscape';
    /** Duration of the video in seconds. */
    duration: number;
    /** Size of the video in bytes. */
    size: number;
    /** Bitrate of the video in bits per second. */
    bitrate: number;
}
/**
 * @name Video Editor
 * @description Edit videos using native device APIs
 *
 * @usage
 * ```typescript
 * import { VideoEditor } from '@ionic-native/video-editor/ngx';
 *
 * constructor(private videoEditor: VideoEditor) { }
 *
 * ...
 *
 * this.videoEditor.transcodeVideo({
 *   fileUri: '/path/to/input.mov',
 *   outputFileName: 'output.mp4',
 *   outputFileType: VideoEditor.OutputFileType.MPEG4
 * })
 * .then((fileUri: string) => console.log('video transcode success', fileUri))
 * .catch((error: any) => console.log('video transcode error', error));
 *
 * ```
 * @interfaces
 * TranscodeOptions
 * TrimOptions
 * CreateThumbnailOptions
 * GetVideoInfoOptions
 * VideoInfo
 */
export declare class VideoEditor extends IonicNativePlugin {
    OptimizeForNetworkUse: {
        NO: number;
        YES: number;
    };
    OutputFileType: {
        M4V: number;
        MPEG4: number;
        M4A: number;
        QUICK_TIME: number;
    };
    /**
     * Transcode a video
     * @param options {TranscodeOptions} Options
     * @returns {Promise<string>} Returns a promise that resolves to the path of the transcoded video
     */
    transcodeVideo(options: TranscodeOptions): Promise<string>;
    /**
     * Trim a video
     * @param options {TrimOptions} Options
     * @returns {Promise<string>} Returns a promise that resolves to the path of the trimmed video
     */
    trim(options: TrimOptions): Promise<string>;
    /**
     * Create a JPEG thumbnail from a video
     * @param options {CreateThumbnailOptions} Options
     * @returns {Promise<string>} Returns a promise that resolves to the path to the jpeg image on the device
     */
    createThumbnail(options: CreateThumbnailOptions): Promise<string>;
    /**
     * Get info on a video (width, height, orientation, duration, size, & bitrate)
     * @param options {GetVideoInfoOptions} Options
     * @returns {Promise<VideoInfo>} Returns a promise that resolves to an object containing info on the video
     */
    getVideoInfo(options: GetVideoInfoOptions): Promise<VideoInfo>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<VideoEditor, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<VideoEditor>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW9uaWNOYXRpdmVQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuZXhwb3J0IGludGVyZmFjZSBUcmFuc2NvZGVPcHRpb25zIHtcbiAgICAvKiogVGhlIHBhdGggdG8gdGhlIHZpZGVvIG9uIHRoZSBkZXZpY2UuICovXG4gICAgZmlsZVVyaTogc3RyaW5nO1xuICAgIC8qKiBUaGUgZmlsZSBuYW1lIGZvciB0aGUgdHJhbnNjb2RlZCB2aWRlbyAqL1xuICAgIG91dHB1dEZpbGVOYW1lOiBzdHJpbmc7XG4gICAgLyoqIEluc3RydWN0aW9ucyBvbiBob3cgdG8gZW5jb2RlIHRoZSB2aWRlby4gQW5kcm9pZCBpcyBhbHdheXMgbXA0ICovXG4gICAgb3V0cHV0RmlsZVR5cGU/OiBudW1iZXI7XG4gICAgLyoqIFNob3VsZCB0aGUgdmlkZW8gYmUgcHJvY2Vzc2VkIHdpdGggcXVhaWx0eSBvciBzcGVlZCBpbiBtaW5kLiBpT1Mgb25seSAqL1xuICAgIG9wdGltaXplRm9yTmV0d29ya1VzZT86IG51bWJlcjtcbiAgICAvKiogU2F2ZSB0aGUgbmV3IHZpZGVvIHRoZSBsaWJyYXJ5LiBOb3Qgc3VwcG9ydGVkIGluIHdpbmRvd3MuIERlZmF1bHRzIHRvIHRydWUgKi9cbiAgICBzYXZlVG9MaWJyYXJ5PzogYm9vbGVhbjtcbiAgICAvKiogRGVsZXRlIHRoZSBvcmlnaW5hbCB2aWRlby4gQW5kcm9pZCBvbmx5LiBEZWZhdWx0cyB0byBmYWxzZSAqL1xuICAgIGRlbGV0ZUlucHV0RmlsZT86IGJvb2xlYW47XG4gICAgLyoqIGlPUyBvbmx5LiBEZWZhdWx0cyB0byB0cnVlICovXG4gICAgbWFpbnRhaW5Bc3BlY3RSYXRpbz86IGJvb2xlYW47XG4gICAgLyoqIFdpZHRoIG9mIHRoZSByZXN1bHQgKi9cbiAgICB3aWR0aD86IG51bWJlcjtcbiAgICAvKiogSGVpZ2h0IG9mIHRoZSByZXN1bHQgKi9cbiAgICBoZWlnaHQ/OiBudW1iZXI7XG4gICAgLyoqIEJpdHJhdGUgaW4gYml0cy4gRGVmYXVsdHMgdG8gMSBtZWdhYml0ICgxMDAwMDAwKS4gKi9cbiAgICB2aWRlb0JpdHJhdGU/OiBudW1iZXI7XG4gICAgLyoqIEZyYW1lcyBwZXIgc2Vjb25kIG9mIHRoZSByZXN1bHQuIEFuZHJvaWQgb25seS4gRGVmYXVsdHMgdG8gMjQuICovXG4gICAgZnBzPzogbnVtYmVyO1xuICAgIC8qKiBOdW1iZXIgb2YgYXVkaW8gY2hhbm5lbHMuIGlPUyBvbmx5LiBEZWZhdWx0cyB0byAyLiAqL1xuICAgIGF1ZGlvQ2hhbm5lbHM/OiBudW1iZXI7XG4gICAgYXVkaW9TYW1wbGVSYXRlPzogbnVtYmVyO1xuICAgIC8qKiBTYW1wbGUgcmF0ZSBmb3IgdGhlIGF1ZGlvLiBpT1Mgb25seS4gRGVmYXVsdHMgdG8gMTI4IGtpbG9iaXRzICgxMjgwMDApLiAqL1xuICAgIGF1ZGlvQml0cmF0ZT86IG51bWJlcjtcbiAgICAvKiogTm90IHN1cHBvcnRlZCBpbiB3aW5kb3dzLCBwcm9ncmVzcyBvbiB0aGUgdHJhbnNjb2RlLiBpbmZvIHdpbGwgYmUgYSBudW1iZXIgZnJvbSAwIHRvIDEwMCAqL1xuICAgIHByb2dyZXNzPzogKGluZm86IG51bWJlcikgPT4gdm9pZDtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgVHJpbU9wdGlvbnMge1xuICAgIC8qKiBQYXRoIHRvIGlucHV0IHZpZGVvLiAqL1xuICAgIGZpbGVVcmk6IHN0cmluZztcbiAgICAvKiogVGltZSB0byBzdGFydCB0cmltbWluZyBpbiBzZWNvbmRzICovXG4gICAgdHJpbVN0YXJ0OiBudW1iZXI7XG4gICAgLyoqIFRpbWUgdG8gZW5kIHRyaW1taW5nIGluIHNlY29uZHMgKi9cbiAgICB0cmltRW5kOiBudW1iZXI7XG4gICAgLyoqIE91dHB1dCBmaWxlIG5hbWUgKi9cbiAgICBvdXRwdXRGaWxlTmFtZTogc3RyaW5nO1xuICAgIC8qKiBQcm9ncmVzcyBvbiB0cmFuc2NvZGUuIGluZm8gd2lsbCBiZSBhIG51bWJlciBmcm9tIDAgdG8gMTAwICovXG4gICAgcHJvZ3Jlc3M/OiAoaW5mbzogYW55KSA9PiB2b2lkO1xufVxuZXhwb3J0IGludGVyZmFjZSBDcmVhdGVUaHVtYm5haWxPcHRpb25zIHtcbiAgICAvKiogVGhlIHBhdGggdG8gdGhlIHZpZGVvIG9uIHRoZSBkZXZpY2UgKi9cbiAgICBmaWxlVXJpOiBzdHJpbmc7XG4gICAgLyoqIFRoZSBmaWxlIG5hbWUgZm9yIHRoZSBKUEVHIGltYWdlICovXG4gICAgb3V0cHV0RmlsZU5hbWU6IHN0cmluZztcbiAgICAvKiogTG9jYXRpb24gaW4gdGhlIHZpZGVvIHRvIGNyZWF0ZSB0aGUgdGh1bWJuYWlsIChpbiBzZWNvbmRzKSAqL1xuICAgIGF0VGltZT86IG51bWJlcjtcbiAgICAvKiogV2lkdGggb2YgdGhlIHRodW1ibmFpbC4gKi9cbiAgICB3aWR0aD86IG51bWJlcjtcbiAgICAvKiogSGVpZ2h0IG9mIHRoZSB0aHVtYm5haWwuICovXG4gICAgaGVpZ2h0PzogbnVtYmVyO1xuICAgIC8qKiBRdWFsaXR5IG9mIHRoZSB0aHVtYm5haWwgKGJldHdlZW4gMSBhbmQgMTAwKS4gKi9cbiAgICBxdWFsaXR5PzogbnVtYmVyO1xufVxuZXhwb3J0IGludGVyZmFjZSBHZXRWaWRlb0luZm9PcHRpb25zIHtcbiAgICAvKiogVGhlIHBhdGggdG8gdGhlIHZpZGVvIG9uIHRoZSBkZXZpY2UuICovXG4gICAgZmlsZVVyaTogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBWaWRlb0luZm8ge1xuICAgIC8qKiBXaWR0aCBvZiB0aGUgdmlkZW8gaW4gcGl4ZWxzLiAqL1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgLyoqIEhlaWdodCBvZiB0aGUgdmlkZW8gaW4gcGl4ZWxzLiAqL1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIC8qKiBPcmllbnRhdGlvbiBvZiB0aGUgdmlkZW8uIFdpbGwgYmUgZWl0aGVyIHBvcnRyYWl0IG9yIGxhbmRzY2FwZS4gKi9cbiAgICBvcmllbnRhdGlvbjogJ3BvcnRyYWl0JyB8ICdsYW5kc2NhcGUnO1xuICAgIC8qKiBEdXJhdGlvbiBvZiB0aGUgdmlkZW8gaW4gc2Vjb25kcy4gKi9cbiAgICBkdXJhdGlvbjogbnVtYmVyO1xuICAgIC8qKiBTaXplIG9mIHRoZSB2aWRlbyBpbiBieXRlcy4gKi9cbiAgICBzaXplOiBudW1iZXI7XG4gICAgLyoqIEJpdHJhdGUgb2YgdGhlIHZpZGVvIGluIGJpdHMgcGVyIHNlY29uZC4gKi9cbiAgICBiaXRyYXRlOiBudW1iZXI7XG59XG4vKipcbiAqIEBuYW1lIFZpZGVvIEVkaXRvclxuICogQGRlc2NyaXB0aW9uIEVkaXQgdmlkZW9zIHVzaW5nIG5hdGl2ZSBkZXZpY2UgQVBJc1xuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgVmlkZW9FZGl0b3IgfSBmcm9tICdAaW9uaWMtbmF0aXZlL3ZpZGVvLWVkaXRvci9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlkZW9FZGl0b3I6IFZpZGVvRWRpdG9yKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLnZpZGVvRWRpdG9yLnRyYW5zY29kZVZpZGVvKHtcbiAqICAgZmlsZVVyaTogJy9wYXRoL3RvL2lucHV0Lm1vdicsXG4gKiAgIG91dHB1dEZpbGVOYW1lOiAnb3V0cHV0Lm1wNCcsXG4gKiAgIG91dHB1dEZpbGVUeXBlOiBWaWRlb0VkaXRvci5PdXRwdXRGaWxlVHlwZS5NUEVHNFxuICogfSlcbiAqIC50aGVuKChmaWxlVXJpOiBzdHJpbmcpID0+IGNvbnNvbGUubG9nKCd2aWRlbyB0cmFuc2NvZGUgc3VjY2VzcycsIGZpbGVVcmkpKVxuICogLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmxvZygndmlkZW8gdHJhbnNjb2RlIGVycm9yJywgZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqIEBpbnRlcmZhY2VzXG4gKiBUcmFuc2NvZGVPcHRpb25zXG4gKiBUcmltT3B0aW9uc1xuICogQ3JlYXRlVGh1bWJuYWlsT3B0aW9uc1xuICogR2V0VmlkZW9JbmZvT3B0aW9uc1xuICogVmlkZW9JbmZvXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFZpZGVvRWRpdG9yIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAgIE9wdGltaXplRm9yTmV0d29ya1VzZToge1xuICAgICAgICBOTzogbnVtYmVyO1xuICAgICAgICBZRVM6IG51bWJlcjtcbiAgICB9O1xuICAgIE91dHB1dEZpbGVUeXBlOiB7XG4gICAgICAgIE00VjogbnVtYmVyO1xuICAgICAgICBNUEVHNDogbnVtYmVyO1xuICAgICAgICBNNEE6IG51bWJlcjtcbiAgICAgICAgUVVJQ0tfVElNRTogbnVtYmVyO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVHJhbnNjb2RlIGEgdmlkZW9cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyB7VHJhbnNjb2RlT3B0aW9uc30gT3B0aW9uc1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHBhdGggb2YgdGhlIHRyYW5zY29kZWQgdmlkZW9cbiAgICAgKi9cbiAgICB0cmFuc2NvZGVWaWRlbyhvcHRpb25zOiBUcmFuc2NvZGVPcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+O1xuICAgIC8qKlxuICAgICAqIFRyaW0gYSB2aWRlb1xuICAgICAqIEBwYXJhbSBvcHRpb25zIHtUcmltT3B0aW9uc30gT3B0aW9uc1xuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHN0cmluZz59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHBhdGggb2YgdGhlIHRyaW1tZWQgdmlkZW9cbiAgICAgKi9cbiAgICB0cmltKG9wdGlvbnM6IFRyaW1PcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIEpQRUcgdGh1bWJuYWlsIGZyb20gYSB2aWRlb1xuICAgICAqIEBwYXJhbSBvcHRpb25zIHtDcmVhdGVUaHVtYm5haWxPcHRpb25zfSBPcHRpb25zXG4gICAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgcGF0aCB0byB0aGUganBlZyBpbWFnZSBvbiB0aGUgZGV2aWNlXG4gICAgICovXG4gICAgY3JlYXRlVGh1bWJuYWlsKG9wdGlvbnM6IENyZWF0ZVRodW1ibmFpbE9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz47XG4gICAgLyoqXG4gICAgICogR2V0IGluZm8gb24gYSB2aWRlbyAod2lkdGgsIGhlaWdodCwgb3JpZW50YXRpb24sIGR1cmF0aW9uLCBzaXplLCAmIGJpdHJhdGUpXG4gICAgICogQHBhcmFtIG9wdGlvbnMge0dldFZpZGVvSW5mb09wdGlvbnN9IE9wdGlvbnNcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxWaWRlb0luZm8+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIG9iamVjdCBjb250YWluaW5nIGluZm8gb24gdGhlIHZpZGVvXG4gICAgICovXG4gICAgZ2V0VmlkZW9JbmZvKG9wdGlvbnM6IEdldFZpZGVvSW5mb09wdGlvbnMpOiBQcm9taXNlPFZpZGVvSW5mbz47XG59XG4iXX0=