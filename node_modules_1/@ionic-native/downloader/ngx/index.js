import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
export var NotificationVisibility;
(function (NotificationVisibility) {
    NotificationVisibility[NotificationVisibility["Visible"] = 0] = "Visible";
    NotificationVisibility[NotificationVisibility["VisibleNotifyCompleted"] = 1] = "VisibleNotifyCompleted";
    NotificationVisibility[NotificationVisibility["VisibilityHidden"] = 2] = "VisibilityHidden";
    NotificationVisibility[NotificationVisibility["VisibleNotifyOnlyCompletion"] = 3] = "VisibleNotifyOnlyCompletion";
})(NotificationVisibility || (NotificationVisibility = {}));
var Downloader = /** @class */ (function (_super) {
    __extends(Downloader, _super);
    function Downloader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Downloader.prototype.download = function (request) { return cordova(this, "download", {}, arguments); };
    Downloader.pluginName = "Downloader";
    Downloader.plugin = "integrator-cordova-plugin-downloader";
    Downloader.pluginRef = "cordova.plugins.Downloader";
    Downloader.repo = "https://github.com/Luka313/integrator-cordova-plugin-downloader.git";
    Downloader.platforms = ["Android"];
    Downloader = __decorate([
        Injectable()
    ], Downloader);
    return Downloader;
}(IonicNativePlugin));
export { Downloader };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL2Rvd25sb2FkZXIvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sOEJBQXNDLE1BQU0sb0JBQW9CLENBQUM7QUFFeEUsTUFBTSxDQUFOLElBQVksc0JBS1g7QUFMRCxXQUFZLHNCQUFzQjtJQUNoQyx5RUFBVyxDQUFBO0lBQ1gsdUdBQTBCLENBQUE7SUFDMUIsMkZBQW9CLENBQUE7SUFDcEIsaUhBQStCLENBQUE7QUFDakMsQ0FBQyxFQUxXLHNCQUFzQixLQUF0QixzQkFBc0IsUUFLakM7O0lBMEcrQiw4QkFBaUI7Ozs7SUFNL0MsNkJBQVEsYUFBQyxPQUF3Qjs7Ozs7O0lBTnRCLFVBQVU7UUFEdEIsVUFBVSxFQUFFO09BQ0EsVUFBVTtxQkFsSHZCO0VBa0hnQyxpQkFBaUI7U0FBcEMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuXG5leHBvcnQgZW51bSBOb3RpZmljYXRpb25WaXNpYmlsaXR5IHtcbiAgVmlzaWJsZSA9IDAsXG4gIFZpc2libGVOb3RpZnlDb21wbGV0ZWQgPSAxLFxuICBWaXNpYmlsaXR5SGlkZGVuID0gMixcbiAgVmlzaWJsZU5vdGlmeU9ubHlDb21wbGV0aW9uID0gMyxcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEb3dubG9hZEh0dHBIZWFkZXIge1xuICBoZWFkZXI6IHN0cmluZztcbiAgdmFsdWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEZXN0aW5hdGlvbkRpcmVjdG9yeSB7XG4gIGRpclR5cGU6IHN0cmluZztcbiAgc3ViUGF0aDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERvd25sb2FkUmVxdWVzdCB7XG4gIC8qKlxuICAgKiBMb2NhdGlvbiBvZiB0aGUgcmVzb3VyY2UgdG8gZG93bmxvYWRcbiAgICovXG4gIHVyaTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHRpdGxlIG9mIHRoaXMgZG93bmxvYWQsIHRvIGJlIGRpc3BsYXllZCBpbiBub3RpZmljYXRpb25zIChpZiBlbmFibGVkKS5cbiAgICogSWYgbm8gdGl0bGUgaXMgZ2l2ZW4sIGEgZGVmYXVsdCBvbmUgd2lsbCBiZSBhc3NpZ25lZCBiYXNlZCBvbiB0aGUgZG93bmxvYWQgZmlsZW5hbWUsIG9uY2UgdGhlIGRvd25sb2FkIHN0YXJ0cy5cbiAgICovXG4gIHRpdGxlPzogc3RyaW5nO1xuICAvKipcbiAgICogU2V0IGEgZGVzY3JpcHRpb24gb2YgdGhpcyBkb3dubG9hZCwgdG8gYmUgZGlzcGxheWVkIGluIG5vdGlmaWNhdGlvbnMgKGlmIGVuYWJsZWQpXG4gICAqL1xuICBkZXNjcmlwdGlvbj86IHN0cmluZztcbiAgLyoqXG4gICAqIFNldCB0aGUgTUlNRSBjb250ZW50IHR5cGUgb2YgdGhpcyBkb3dubG9hZC4gVGhpcyB3aWxsIG92ZXJyaWRlIHRoZSBjb250ZW50IHR5cGUgZGVjbGFyZWQgaW4gdGhlIHNlcnZlcidzIHJlc3BvbnNlLlxuICAgKi9cbiAgbWltZVR5cGU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBTZXQgd2hldGhlciB0aGlzIGRvd25sb2FkIHNob3VsZCBiZSBkaXNwbGF5ZWQgaW4gdGhlIHN5c3RlbSdzIERvd25sb2FkcyBVSS4gVHJ1ZSBieSBkZWZhdWx0LlxuICAgKi9cbiAgdmlzaWJsZUluRG93bmxvYWRzVWk/OiBib29sZWFuO1xuICAvKipcbiAgICogQ29udHJvbCB3aGV0aGVyIGEgc3lzdGVtIG5vdGlmaWNhdGlvbiBpcyBwb3N0ZWQgYnkgdGhlIGRvd25sb2FkIG1hbmFnZXIgd2hpbGUgdGhpcyBkb3dubG9hZCBpcyBydW5uaW5nIG9yIHdoZW4gaXQgaXMgY29tcGxldGVkLlxuICAgKi9cbiAgbm90aWZpY2F0aW9uVmlzaWJpbGl0eT86IE5vdGlmaWNhdGlvblZpc2liaWxpdHk7XG4gIC8qKlxuICAgKiBTZXQgdGhlIGxvY2FsIGRlc3RpbmF0aW9uIGZvciB0aGUgZG93bmxvYWRlZCBmaWxlIHRvIGEgcGF0aCB3aXRoaW4gdGhlIGFwcGxpY2F0aW9uJ3MgZXh0ZXJuYWwgZmlsZXMgZGlyZWN0b3J5XG4gICAqL1xuICBkZXN0aW5hdGlvbkluRXh0ZXJuYWxGaWxlc0Rpcj86IERlc3RpbmF0aW9uRGlyZWN0b3J5O1xuICAvKipcbiAgICogU2V0IHRoZSBsb2NhbCBkZXN0aW5hdGlvbiBmb3IgdGhlIGRvd25sb2FkZWQgZmlsZSB0byBhIHBhdGggd2l0aGluIHRoZSBwdWJsaWMgZXh0ZXJuYWwgc3RvcmFnZSBkaXJlY3RvcnlcbiAgICovXG4gIGRlc3RpbmF0aW9uSW5FeHRlcm5hbFB1YmxpY0Rpcj86IERlc3RpbmF0aW9uRGlyZWN0b3J5O1xuICAvKipcbiAgICogU2V0IHRoZSBsb2NhbCBkZXN0aW5hdGlvbiBmb3IgdGhlIGRvd25sb2FkZWQgZmlsZS5cbiAgICogTXVzdCBiZSBhIGZpbGUgVVJJIHRvIGEgcGF0aCBvbiBleHRlcm5hbCBzdG9yYWdlLCBhbmQgdGhlIGNhbGxpbmcgYXBwbGljYXRpb24gbXVzdCBoYXZlIHRoZSBXUklURV9FWFRFUk5BTF9TVE9SQUdFIHBlcm1pc3Npb24uXG4gICAqL1xuICBkZXN0aW5hdGlvblVyaT86IHN0cmluZztcbiAgLyoqXG4gICAqIEFkZCBhbiBIVFRQIGhlYWRlciB0byBiZSBpbmNsdWRlZCB3aXRoIHRoZSBkb3dubG9hZCByZXF1ZXN0LiBUaGUgaGVhZGVyIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGVuZCBvZiB0aGUgbGlzdC5cbiAgICovXG4gIGhlYWRlcnM/OiBEb3dubG9hZEh0dHBIZWFkZXJbXTtcbn1cblxuLyoqXG4gKiBAbmFtZSBEb3dubG9hZGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGlzIGRlc2lnbmVkIHRvIHN1cHBvcnQgZG93bmxvYWRpbmcgZmlsZXMgdXNpbmcgQW5kcm9pZCBEb3dubG9hZE1hbmFnZXIuXG4gKlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgRG93bmxvYWRlciB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZG93bmxvYWRlci9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGRvd25sb2FkZXI6IERvd25sb2FkZXIpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqICAgIHZhciByZXF1ZXN0OiBEb3dubG9hZFJlcXVlc3QgPSB7XG4gKiAgICAgICAgICAgdXJpOiBZT1VSX1VSSSxcbiAqICAgICAgICAgICB0aXRsZTogJ015RG93bmxvYWQnLFxuICogICAgICAgICAgIGRlc2NyaXB0aW9uOiAnJyxcbiAqICAgICAgICAgICBtaW1lVHlwZTogJycsXG4gKiAgICAgICAgICAgdmlzaWJsZUluRG93bmxvYWRzVWk6IHRydWUsXG4gKiAgICAgICAgICAgbm90aWZpY2F0aW9uVmlzaWJpbGl0eTogTm90aWZpY2F0aW9uVmlzaWJpbGl0eS5WaXNpYmxlTm90aWZ5Q29tcGxldGVkLFxuICogICAgICAgICAgIGRlc3RpbmF0aW9uSW5FeHRlcm5hbEZpbGVzRGlyOiB7XG4gKiAgICAgICAgICAgICAgIGRpclR5cGU6ICdEb3dubG9hZHMnLFxuICogICAgICAgICAgICAgICBzdWJQYXRoOiAnTXlGaWxlLmFwaydcbiAqICAgICAgICAgICB9XG4gKiAgICAgICB9O1xuICpcbiAqXG4gKiAgIHRoaXMuZG93bmxvYWRlci5kb3dubG9hZChyZXF1ZXN0KVxuICogICBcdFx0XHQudGhlbigobG9jYXRpb246IHN0cmluZykgPT4gY29uc29sZS5sb2coJ0ZpbGUgZG93bmxvYWRlZCBhdDonK2xvY2F0aW9uKSlcbiAqICAgXHRcdFx0LmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogTm90aWZpY2F0aW9uVmlzaWJpbGl0eVxuICogSGVhZGVyXG4gKiBEZXN0aW5hdGlvbkRpcmVjdG9yeVxuICogRG93bmxvYWRIdHRwSGVhZGVyXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnRG93bmxvYWRlcicsXG4gIHBsdWdpbjogJ2ludGVncmF0b3ItY29yZG92YS1wbHVnaW4tZG93bmxvYWRlcicsXG4gIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5Eb3dubG9hZGVyJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9MdWthMzEzL2ludGVncmF0b3ItY29yZG92YS1wbHVnaW4tZG93bmxvYWRlci5naXQnLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEb3dubG9hZGVyIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICogIFN0YXJ0cyBhIG5ldyBkb3dubG9hZCBhbmQgcmV0dXJucyBsb2NhdGlvbiBvZiB0aGUgZG93bmxvYWRlZCBmaWxlIG9uIGNvbXBsZXRpb25cbiAgICogIEBwYXJhbSByZXF1ZXN0IHtEb3dubG9hZFJlcXVlc3R9XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRvd25sb2FkKHJlcXVlc3Q6IERvd25sb2FkUmVxdWVzdCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=