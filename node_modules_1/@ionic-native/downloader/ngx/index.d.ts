import { IonicNativePlugin } from '@ionic-native/core';
import * as ɵngcc0 from '@angular/core';
export declare enum NotificationVisibility {
    Visible = 0,
    VisibleNotifyCompleted = 1,
    VisibilityHidden = 2,
    VisibleNotifyOnlyCompletion = 3
}
export interface DownloadHttpHeader {
    header: string;
    value: string;
}
export interface DestinationDirectory {
    dirType: string;
    subPath: string;
}
export interface DownloadRequest {
    /**
     * Location of the resource to download
     */
    uri: string;
    /**
     * Set the title of this download, to be displayed in notifications (if enabled).
     * If no title is given, a default one will be assigned based on the download filename, once the download starts.
     */
    title?: string;
    /**
     * Set a description of this download, to be displayed in notifications (if enabled)
     */
    description?: string;
    /**
     * Set the MIME content type of this download. This will override the content type declared in the server's response.
     */
    mimeType?: string;
    /**
     * Set whether this download should be displayed in the system's Downloads UI. True by default.
     */
    visibleInDownloadsUi?: boolean;
    /**
     * Control whether a system notification is posted by the download manager while this download is running or when it is completed.
     */
    notificationVisibility?: NotificationVisibility;
    /**
     * Set the local destination for the downloaded file to a path within the application's external files directory
     */
    destinationInExternalFilesDir?: DestinationDirectory;
    /**
     * Set the local destination for the downloaded file to a path within the public external storage directory
     */
    destinationInExternalPublicDir?: DestinationDirectory;
    /**
     * Set the local destination for the downloaded file.
     * Must be a file URI to a path on external storage, and the calling application must have the WRITE_EXTERNAL_STORAGE permission.
     */
    destinationUri?: string;
    /**
     * Add an HTTP header to be included with the download request. The header will be added to the end of the list.
     */
    headers?: DownloadHttpHeader[];
}
/**
 * @name Downloader
 * @description
 * This plugin is designed to support downloading files using Android DownloadManager.
 *
 *
 * @usage
 * ```typescript
 * import { Downloader } from '@ionic-native/downloader/ngx';
 *
 *
 * constructor(private downloader: Downloader) { }
 *
 * ...
 *
 *    var request: DownloadRequest = {
 *           uri: YOUR_URI,
 *           title: 'MyDownload',
 *           description: '',
 *           mimeType: '',
 *           visibleInDownloadsUi: true,
 *           notificationVisibility: NotificationVisibility.VisibleNotifyCompleted,
 *           destinationInExternalFilesDir: {
 *               dirType: 'Downloads',
 *               subPath: 'MyFile.apk'
 *           }
 *       };
 *
 *
 *   this.downloader.download(request)
 *   			.then((location: string) => console.log('File downloaded at:'+location))
 *   			.catch((error: any) => console.error(error));
 *
 * ```
 * @interfaces
 * NotificationVisibility
 * Header
 * DestinationDirectory
 * DownloadHttpHeader
 */
export declare class Downloader extends IonicNativePlugin {
    /**
     *  Starts a new download and returns location of the downloaded file on completion
     *  @param request {DownloadRequest}
     */
    download(request: DownloadRequest): Promise<string>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Downloader, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<Downloader>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElvbmljTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmV4cG9ydCBkZWNsYXJlIGVudW0gTm90aWZpY2F0aW9uVmlzaWJpbGl0eSB7XG4gICAgVmlzaWJsZSA9IDAsXG4gICAgVmlzaWJsZU5vdGlmeUNvbXBsZXRlZCA9IDEsXG4gICAgVmlzaWJpbGl0eUhpZGRlbiA9IDIsXG4gICAgVmlzaWJsZU5vdGlmeU9ubHlDb21wbGV0aW9uID0gM1xufVxuZXhwb3J0IGludGVyZmFjZSBEb3dubG9hZEh0dHBIZWFkZXIge1xuICAgIGhlYWRlcjogc3RyaW5nO1xuICAgIHZhbHVlOiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIERlc3RpbmF0aW9uRGlyZWN0b3J5IHtcbiAgICBkaXJUeXBlOiBzdHJpbmc7XG4gICAgc3ViUGF0aDogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBEb3dubG9hZFJlcXVlc3Qge1xuICAgIC8qKlxuICAgICAqIExvY2F0aW9uIG9mIHRoZSByZXNvdXJjZSB0byBkb3dubG9hZFxuICAgICAqL1xuICAgIHVyaTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgdGl0bGUgb2YgdGhpcyBkb3dubG9hZCwgdG8gYmUgZGlzcGxheWVkIGluIG5vdGlmaWNhdGlvbnMgKGlmIGVuYWJsZWQpLlxuICAgICAqIElmIG5vIHRpdGxlIGlzIGdpdmVuLCBhIGRlZmF1bHQgb25lIHdpbGwgYmUgYXNzaWduZWQgYmFzZWQgb24gdGhlIGRvd25sb2FkIGZpbGVuYW1lLCBvbmNlIHRoZSBkb3dubG9hZCBzdGFydHMuXG4gICAgICovXG4gICAgdGl0bGU/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0IGEgZGVzY3JpcHRpb24gb2YgdGhpcyBkb3dubG9hZCwgdG8gYmUgZGlzcGxheWVkIGluIG5vdGlmaWNhdGlvbnMgKGlmIGVuYWJsZWQpXG4gICAgICovXG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBNSU1FIGNvbnRlbnQgdHlwZSBvZiB0aGlzIGRvd25sb2FkLiBUaGlzIHdpbGwgb3ZlcnJpZGUgdGhlIGNvbnRlbnQgdHlwZSBkZWNsYXJlZCBpbiB0aGUgc2VydmVyJ3MgcmVzcG9uc2UuXG4gICAgICovXG4gICAgbWltZVR5cGU/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2V0IHdoZXRoZXIgdGhpcyBkb3dubG9hZCBzaG91bGQgYmUgZGlzcGxheWVkIGluIHRoZSBzeXN0ZW0ncyBEb3dubG9hZHMgVUkuIFRydWUgYnkgZGVmYXVsdC5cbiAgICAgKi9cbiAgICB2aXNpYmxlSW5Eb3dubG9hZHNVaT86IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ29udHJvbCB3aGV0aGVyIGEgc3lzdGVtIG5vdGlmaWNhdGlvbiBpcyBwb3N0ZWQgYnkgdGhlIGRvd25sb2FkIG1hbmFnZXIgd2hpbGUgdGhpcyBkb3dubG9hZCBpcyBydW5uaW5nIG9yIHdoZW4gaXQgaXMgY29tcGxldGVkLlxuICAgICAqL1xuICAgIG5vdGlmaWNhdGlvblZpc2liaWxpdHk/OiBOb3RpZmljYXRpb25WaXNpYmlsaXR5O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgbG9jYWwgZGVzdGluYXRpb24gZm9yIHRoZSBkb3dubG9hZGVkIGZpbGUgdG8gYSBwYXRoIHdpdGhpbiB0aGUgYXBwbGljYXRpb24ncyBleHRlcm5hbCBmaWxlcyBkaXJlY3RvcnlcbiAgICAgKi9cbiAgICBkZXN0aW5hdGlvbkluRXh0ZXJuYWxGaWxlc0Rpcj86IERlc3RpbmF0aW9uRGlyZWN0b3J5O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgbG9jYWwgZGVzdGluYXRpb24gZm9yIHRoZSBkb3dubG9hZGVkIGZpbGUgdG8gYSBwYXRoIHdpdGhpbiB0aGUgcHVibGljIGV4dGVybmFsIHN0b3JhZ2UgZGlyZWN0b3J5XG4gICAgICovXG4gICAgZGVzdGluYXRpb25JbkV4dGVybmFsUHVibGljRGlyPzogRGVzdGluYXRpb25EaXJlY3Rvcnk7XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBsb2NhbCBkZXN0aW5hdGlvbiBmb3IgdGhlIGRvd25sb2FkZWQgZmlsZS5cbiAgICAgKiBNdXN0IGJlIGEgZmlsZSBVUkkgdG8gYSBwYXRoIG9uIGV4dGVybmFsIHN0b3JhZ2UsIGFuZCB0aGUgY2FsbGluZyBhcHBsaWNhdGlvbiBtdXN0IGhhdmUgdGhlIFdSSVRFX0VYVEVSTkFMX1NUT1JBR0UgcGVybWlzc2lvbi5cbiAgICAgKi9cbiAgICBkZXN0aW5hdGlvblVyaT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBZGQgYW4gSFRUUCBoZWFkZXIgdG8gYmUgaW5jbHVkZWQgd2l0aCB0aGUgZG93bmxvYWQgcmVxdWVzdC4gVGhlIGhlYWRlciB3aWxsIGJlIGFkZGVkIHRvIHRoZSBlbmQgb2YgdGhlIGxpc3QuXG4gICAgICovXG4gICAgaGVhZGVycz86IERvd25sb2FkSHR0cEhlYWRlcltdO1xufVxuLyoqXG4gKiBAbmFtZSBEb3dubG9hZGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGlzIGRlc2lnbmVkIHRvIHN1cHBvcnQgZG93bmxvYWRpbmcgZmlsZXMgdXNpbmcgQW5kcm9pZCBEb3dubG9hZE1hbmFnZXIuXG4gKlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgRG93bmxvYWRlciB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZG93bmxvYWRlci9uZ3gnO1xuICpcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGRvd25sb2FkZXI6IERvd25sb2FkZXIpIHsgfVxuICpcbiAqIC4uLlxuICpcbiAqICAgIHZhciByZXF1ZXN0OiBEb3dubG9hZFJlcXVlc3QgPSB7XG4gKiAgICAgICAgICAgdXJpOiBZT1VSX1VSSSxcbiAqICAgICAgICAgICB0aXRsZTogJ015RG93bmxvYWQnLFxuICogICAgICAgICAgIGRlc2NyaXB0aW9uOiAnJyxcbiAqICAgICAgICAgICBtaW1lVHlwZTogJycsXG4gKiAgICAgICAgICAgdmlzaWJsZUluRG93bmxvYWRzVWk6IHRydWUsXG4gKiAgICAgICAgICAgbm90aWZpY2F0aW9uVmlzaWJpbGl0eTogTm90aWZpY2F0aW9uVmlzaWJpbGl0eS5WaXNpYmxlTm90aWZ5Q29tcGxldGVkLFxuICogICAgICAgICAgIGRlc3RpbmF0aW9uSW5FeHRlcm5hbEZpbGVzRGlyOiB7XG4gKiAgICAgICAgICAgICAgIGRpclR5cGU6ICdEb3dubG9hZHMnLFxuICogICAgICAgICAgICAgICBzdWJQYXRoOiAnTXlGaWxlLmFwaydcbiAqICAgICAgICAgICB9XG4gKiAgICAgICB9O1xuICpcbiAqXG4gKiAgIHRoaXMuZG93bmxvYWRlci5kb3dubG9hZChyZXF1ZXN0KVxuICogICBcdFx0XHQudGhlbigobG9jYXRpb246IHN0cmluZykgPT4gY29uc29sZS5sb2coJ0ZpbGUgZG93bmxvYWRlZCBhdDonK2xvY2F0aW9uKSlcbiAqICAgXHRcdFx0LmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogTm90aWZpY2F0aW9uVmlzaWJpbGl0eVxuICogSGVhZGVyXG4gKiBEZXN0aW5hdGlvbkRpcmVjdG9yeVxuICogRG93bmxvYWRIdHRwSGVhZGVyXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERvd25sb2FkZXIgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gICAgLyoqXG4gICAgICogIFN0YXJ0cyBhIG5ldyBkb3dubG9hZCBhbmQgcmV0dXJucyBsb2NhdGlvbiBvZiB0aGUgZG93bmxvYWRlZCBmaWxlIG9uIGNvbXBsZXRpb25cbiAgICAgKiAgQHBhcmFtIHJlcXVlc3Qge0Rvd25sb2FkUmVxdWVzdH1cbiAgICAgKi9cbiAgICBkb3dubG9hZChyZXF1ZXN0OiBEb3dubG9hZFJlcXVlc3QpOiBQcm9taXNlPHN0cmluZz47XG59XG4iXX0=