var NgxEmojiPickerModule_1;
import { __decorate } from "tslib";
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { EmojiButtonComponent } from './components/emoji-button.component';
import { EmojiCategoriesComponent } from './components/emoji-categories.component';
import { EmojiCategoryComponent } from './components/emoji-category.component';
import { EmojiContentComponent } from './components/emoji-content.component';
import { EmojiFooterComponent } from './components/emoji-footer.component';
import { EmojiHeaderComponent } from './components/emoji-header.component';
import { EmojiListComponent } from './components/emoji-list.component';
import { EmojiSearchComponent } from './components/emoji-search.component';
import { EmojiPickerApiDirective } from './directives/emoji-picker-api.directive';
import { EmojiPickerCaretDirective } from './directives/emoji-picker-caret.directive';
import { EmojiEmptyCategoryPipe } from './pipes/emoji-empty-category.pipe';
import { EmojiPickerComponent } from './components/emoji-picker.component';
let NgxEmojiPickerModule = NgxEmojiPickerModule_1 = class NgxEmojiPickerModule {
    static forRoot() {
        return {
            ngModule: NgxEmojiPickerModule_1,
            providers: []
        };
    }
};
NgxEmojiPickerModule = NgxEmojiPickerModule_1 = __decorate([
    NgModule({
        declarations: [
            EmojiPickerApiDirective,
            EmojiPickerCaretDirective,
            EmojiButtonComponent,
            EmojiContentComponent,
            EmojiPickerComponent,
            EmojiListComponent,
            EmojiHeaderComponent,
            EmojiSearchComponent,
            EmojiCategoriesComponent,
            EmojiCategoryComponent,
            EmojiFooterComponent,
            EmojiEmptyCategoryPipe
        ],
        imports: [
            CommonModule
        ],
        exports: [
            EmojiPickerApiDirective,
            EmojiPickerCaretDirective,
            EmojiButtonComponent,
            EmojiContentComponent,
            EmojiPickerComponent,
            EmojiListComponent,
            EmojiHeaderComponent,
            EmojiSearchComponent,
            EmojiCategoriesComponent,
            EmojiCategoryComponent,
            EmojiFooterComponent
        ],
        providers: [],
        entryComponents: [EmojiPickerComponent]
    })
], NgxEmojiPickerModule);
export { NgxEmojiPickerModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWVtb2ppLXBpY2tlci5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZW1vamktcGlja2VyLyIsInNvdXJjZXMiOlsibGliL25neC1lbW9qaS1waWNrZXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQy9FLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRTNFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBcUMzRSxJQUFhLG9CQUFvQiw0QkFBakMsTUFBYSxvQkFBb0I7SUFDL0IsTUFBTSxDQUFDLE9BQU87UUFDWixPQUFPO1lBQ0wsUUFBUSxFQUFFLHNCQUFvQjtZQUM5QixTQUFTLEVBQUUsRUFBRTtTQUNkLENBQUM7SUFDSixDQUFDO0NBQ0QsQ0FBQTtBQVBXLG9CQUFvQjtJQWxDaEMsUUFBUSxDQUFDO1FBQ1IsWUFBWSxFQUFFO1lBQ1osdUJBQXVCO1lBQ3ZCLHlCQUF5QjtZQUN6QixvQkFBb0I7WUFDcEIscUJBQXFCO1lBQ3JCLG9CQUFvQjtZQUNwQixrQkFBa0I7WUFDbEIsb0JBQW9CO1lBQ3BCLG9CQUFvQjtZQUNwQix3QkFBd0I7WUFDeEIsc0JBQXNCO1lBQ3RCLG9CQUFvQjtZQUNwQixzQkFBc0I7U0FDdkI7UUFDRCxPQUFPLEVBQUU7WUFDUCxZQUFZO1NBQ2I7UUFDRCxPQUFPLEVBQUU7WUFDUCx1QkFBdUI7WUFDdkIseUJBQXlCO1lBQ3pCLG9CQUFvQjtZQUNwQixxQkFBcUI7WUFDckIsb0JBQW9CO1lBQ3BCLGtCQUFrQjtZQUNsQixvQkFBb0I7WUFDcEIsb0JBQW9CO1lBQ3BCLHdCQUF3QjtZQUN4QixzQkFBc0I7WUFDdEIsb0JBQW9CO1NBQ3JCO1FBQ0QsU0FBUyxFQUFFLEVBQUU7UUFDYixlQUFlLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztLQUN4QyxDQUFDO0dBQ1csb0JBQW9CLENBTy9CO1NBUFcsb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbmltcG9ydCB7IEVtb2ppQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2Vtb2ppLWJ1dHRvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgRW1vamlDYXRlZ29yaWVzQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2Vtb2ppLWNhdGVnb3JpZXMuY29tcG9uZW50JztcbmltcG9ydCB7IEVtb2ppQ2F0ZWdvcnlDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvZW1vamktY2F0ZWdvcnkuY29tcG9uZW50JztcbmltcG9ydCB7IEVtb2ppQ29udGVudENvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9lbW9qaS1jb250ZW50LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBFbW9qaUZvb3RlckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9lbW9qaS1mb290ZXIuY29tcG9uZW50JztcbmltcG9ydCB7IEVtb2ppSGVhZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2Vtb2ppLWhlYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgRW1vamlMaXN0Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2Vtb2ppLWxpc3QuY29tcG9uZW50JztcbmltcG9ydCB7IEVtb2ppU2VhcmNoQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2Vtb2ppLXNlYXJjaC5jb21wb25lbnQnO1xuXG5pbXBvcnQgeyBFbW9qaVBpY2tlckFwaURpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9lbW9qaS1waWNrZXItYXBpLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBFbW9qaVBpY2tlckNhcmV0RGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2Vtb2ppLXBpY2tlci1jYXJldC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgRW1vamlFbXB0eUNhdGVnb3J5UGlwZSB9IGZyb20gJy4vcGlwZXMvZW1vamktZW1wdHktY2F0ZWdvcnkucGlwZSc7XG5pbXBvcnQgeyBFbW9qaVBpY2tlckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9lbW9qaS1waWNrZXIuY29tcG9uZW50JztcblxuXG5ATmdNb2R1bGUoe1xuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBFbW9qaVBpY2tlckFwaURpcmVjdGl2ZSxcbiAgICBFbW9qaVBpY2tlckNhcmV0RGlyZWN0aXZlLFxuICAgIEVtb2ppQnV0dG9uQ29tcG9uZW50LFxuICAgIEVtb2ppQ29udGVudENvbXBvbmVudCxcbiAgICBFbW9qaVBpY2tlckNvbXBvbmVudCxcbiAgICBFbW9qaUxpc3RDb21wb25lbnQsXG4gICAgRW1vamlIZWFkZXJDb21wb25lbnQsXG4gICAgRW1vamlTZWFyY2hDb21wb25lbnQsXG4gICAgRW1vamlDYXRlZ29yaWVzQ29tcG9uZW50LFxuICAgIEVtb2ppQ2F0ZWdvcnlDb21wb25lbnQsXG4gICAgRW1vamlGb290ZXJDb21wb25lbnQsXG4gICAgRW1vamlFbXB0eUNhdGVnb3J5UGlwZVxuICBdLFxuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlXG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBFbW9qaVBpY2tlckFwaURpcmVjdGl2ZSxcbiAgICBFbW9qaVBpY2tlckNhcmV0RGlyZWN0aXZlLFxuICAgIEVtb2ppQnV0dG9uQ29tcG9uZW50LFxuICAgIEVtb2ppQ29udGVudENvbXBvbmVudCxcbiAgICBFbW9qaVBpY2tlckNvbXBvbmVudCxcbiAgICBFbW9qaUxpc3RDb21wb25lbnQsXG4gICAgRW1vamlIZWFkZXJDb21wb25lbnQsXG4gICAgRW1vamlTZWFyY2hDb21wb25lbnQsXG4gICAgRW1vamlDYXRlZ29yaWVzQ29tcG9uZW50LFxuICAgIEVtb2ppQ2F0ZWdvcnlDb21wb25lbnQsXG4gICAgRW1vamlGb290ZXJDb21wb25lbnRcbiAgXSxcbiAgcHJvdmlkZXJzOiBbXSxcbiAgZW50cnlDb21wb25lbnRzOiBbRW1vamlQaWNrZXJDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIE5neEVtb2ppUGlja2VyTW9kdWxlIHtcbiAgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVyczxOZ3hFbW9qaVBpY2tlck1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmd4RW1vamlQaWNrZXJNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtdXG4gICAgfTtcbiAgfVxuIH1cbiJdfQ==